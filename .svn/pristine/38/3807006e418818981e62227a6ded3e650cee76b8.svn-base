package postIt.note.view;

import java.awt.Color;
import java.awt.Point;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JTextPane;

import postIt.note.NoteInfo;

public class PostItNote extends JTextPane implements Observer {

	/**
	 *  
	 */
	private static final long serialVersionUID = 3159494906460844606L;
	private static final int YELLOW = 0;
	private static final int PINK = 1;
	private static final int CYAN = 2;
	private static final int ORANGE = 3;
	private static final int WHITE = 4;
	private int color;

	private Point coordinate;

	public int getColor() {
		return color;
	}

	public void setColor(int color) {
		this.color = color;
	}

	public Point getCoordinate() {
		return coordinate;
	}

	public void setCoordinate(Point coordinate) {
		this.coordinate = coordinate;
	}

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}

	private int width;
	private int height;

	public PostItNote(NoteInfo noteInfo) {
		color = noteInfo.getColor();
		setBkgColor();

		/*
		 * Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		 * int screenWidth = (int) screenSize.getWidth(); int screenHeight =
		 * (int) screenSize.getHeight(); coordinate = new Point((int)
		 * (Math.random() * screenWidth), (int) (Math.random() * screenHeight));
		 */

		width = noteInfo.getWidth();
		height = noteInfo.getHeight();
		coordinate = new Point(noteInfo.getX(), noteInfo.getY());
		setText(noteInfo.getText());
		setBounds(coordinate.x - width / 2, coordinate.y - height / 2, width,
				height);
	}

	private void setBkgColor() {
		switch (color) {
		case YELLOW:
			setBackground(Color.YELLOW);
			break;
		case PINK:
			setBackground(Color.PINK);
			break;
		case CYAN:
			setBackground(Color.CYAN);
			break;
		case ORANGE:
			setBackground(Color.ORANGE);
			break;
		case WHITE:
			setBackground(Color.WHITE);
			break;
		default:
			setBackground(Color.YELLOW);
			color = YELLOW;
		}
	}

	public void incrementColor() {
		color++;
		if (color > WHITE) {
			color = YELLOW;
		}
		setBkgColor();
	}

	public void decrementColor() {
		color--;
		if (color < YELLOW) {
			color = WHITE;
		}
		setBkgColor();
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		// paintComponent((Graphics) arg1);
	}

	public void move(int deltaX, int deltaY) {
		coordinate.setLocation(coordinate.x + deltaX, coordinate.y + deltaY);
		setBounds(coordinate.x - width / 2, coordinate.y - height / 2, width,
				height);
	}

	public boolean isInside(int x, int y) {
		if (coordinate.x - width / 2 <= x && coordinate.x + width / 2 >= x
				&& coordinate.y - height / 2 <= y
				&& coordinate.y + height / 2 >= y) {
			return true;
		}
		return false;
	}
}
